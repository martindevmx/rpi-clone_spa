#!/bin/bash

VERSION=1.4_spa
# Original script :
#	https://github.com/billw2/rpi-clone/blob/master/rpi-clone
#
# Version 1.4_spa
#	* Traducci칩n al espa침ol
#	* Spanish translation
# Version 1.4	2016/03/23
#	* Use -F on mkfs.ext4 and just avoid the question.
# Version 1.3	2016/03/16
#	* don't > /dev/null for the mkfs.ext4 since mkfs can ask a question
# Version 1.2	2015/02/17
#	* add -x option
#	* tweak some echo messages
# Version 1.1	2015/02/16
#	* Do not include dphys swapfile in the clone.
#	* Add a missing -s flag to one of the parted commands.
#	* Dump parted stderr to /dev/null since it now complains about destination
#	    disk partitions ending outside of disk before I get chance to resize
#	    the partitions.
#	* Strip trailing s from PART_START - (fdisk now doesn't seem to accept...)
#

PGM=`basename $0`

RSYNC_OPTIONS="--force -rltWDEgopt"

# List of extra dirs to create under /mnt.
OPTIONAL_MNT_DIRS="clone mnt sda sdb rpi0 rpi1"

# Where to mount the disk filesystems to be rsynced.
CLONE=/mnt/clone

CLONE_LOG=/var/log/$PGM.log

HOSTNAME=`hostname`

SRC_BOOT_PARTITION_TYPE=`parted /dev/mmcblk0 -ms p | grep "^1" | cut -f 5 -d:`
SRC_ROOT_PARTITION_TYPE=`parted /dev/mmcblk0 -ms p | grep "^2" | cut -f 5 -d:`

if [ `id -u` != 0 ]
then
    echo -e "$PGM necesita ejecutarse como root (SUDO)\n"
    exit 1
fi

if ! rsync --version > /dev/null
then
	echo -e "\nVaya! rpi-clone necesita la aplicacion rsync para funcionar, pero no puede encontrarse."
	echo "Verifique que esta instalado, de lo contrario, puede instalarlo de la siguiente manera:"
	echo "    $ sudo apt-get update"
	echo -e "    $ sudo apt-get install rsync\n"
	exit 0
fi

if test -e /sbin/fsck.vfat
then
	HAVE_FSCK_VFAT="yes"
else

	echo "[Nota] no se encontro fsck.vfat."
	echo "Es recomendable instalar dosfstools:"
	echo "    $ sudo apt-get update"
	echo "    $ sudo apt-get install dosfstools"
fi

usage()
	{
	echo ""
	echo "uso: $PGM sdN {-f|--force-initialize} {-v|--verbose} {-x}"
	echo "    Ejemplo:  $PGM sda"
	echo "    -v - enlista todos los archivos que se copian - con detalles"
	echo "    -f - fuerza la inicializacion de las particiones destino"
	echo "    -x - utiliza -x para el modo detallado de depuracion"
	echo ""
	echo "    Clone (rsync) el sistema de achivos de una Rapsberry Pi a una tarjeta SD"
	echo "    'sdN' de destino que se encuentre conectada a la Pi mediente un puerto USB"
	echo "    (via lector de tarjetas USB). $PGM puede clonar el sistema activo a una"
	echo "    nueva tarjeta SD o puede hacer rsync a un respaldo existente en tarjetas"
	echo "    SD de la Rapsberry Pi."
	echo ""
	echo "    Si la tarjeta SD de destino tiene una particion 1 $SRC_BOOT_PARTITION_TYPE"
	echo "    y una particion $SRC_ROOT_PARTITION_TYPE, $PGM asume"
	echo "    (salvo que se use la opcion -f) que la tarjeta SD es un respaldo ya"
	echo "    existente con las particiones con tamanio y configuracion apropiadas para"
	echo "    Rapsberry Pi. Lo unico necesario es montar las particiones y"
	echo "    realizar rsync con el sistema actual."
	echo ""
	echo "    Si estas particiones no se encuentran (o se usa -f) entonces $PGM preguntara"
	echo "    si debe preparar las particiones en la tarjeta SD. Esto se realiza con un"
	echo "    'dd' parcial desde el dispositivo booteado actual /dev/mmcblk0 a la tarjeta"
	echo "    SD de destino /dev/sdN, seguido de un reajuste con fdisk y mkfs.ext4 de la"
	echo "    particion 2 /dev/sdN. Esto crea una particion 1 $SRC_BOOT_PARTITION_TYPE"
	echo "    conteniendo todos los archivos de booteo y una particion 2 rootfs vacia"
	echo "    pero con tama침o adecuado. Las particiones de la tarjeta SD se montan y"
	echo "    se ejecuta el comando 'rsync' al sistema activo."
	echo ""
	echo "    La particiones de la SDcard destino seran montadas en $CLONE."
	echo "    Un archivo de registro (log) ser치 escrito a $CLONE_LOG."
	echo "    Es mejor asegurarse de no estar ejecutando otros programas que realicen"
	echo "    escritura en el disco mientras se ejecuta $PGM"
	echo ""
	echo "    Version $VERSION"
	exit 0
	}

VERBOSE=off

while [ "$1" ]
do
	case "$1" in
		-v|--verbose)
			VERBOSE=on
			RSYNC_OPTIONS=${RSYNC_OPTIONS}v
			;;
		-f|--force-initialize)
			FORCE_INITIALIZE=true
			;;
		-x)
			set -x
			;;
		-h|--help)
			usage
			;;
		*)
			if [ "$DST_DISK" != "" ]
			then
				echo "Argumentos no validos"
				usage
			fi
			DST_DISK=$1
			;;
	esac
	shift
done


if [ "$DST_DISK" = "" ]
then
	usage
	exit 0
fi

if ! cat /proc/partitions | grep -q $DST_DISK
then
	echo "No existe el disco '$DST_DISK'."
	echo "Inserta la SDcard destino a un lector de tarjeta conectado a"
	echo "un puerto USB.  Sino se muestra como el disco '$DST_DISK', teclea"
	echo -e "'cat /proc/partitions' para saber donde se encuentra.\n"
	exit 0
fi

unmount_or_abort()
	{
	echo -n "Quieres desmontar $1? (si/no): "
	read resp
	if [ "$resp" = "s" ] || [ "$resp" = "si" ]
	then
		if ! umount $1
		then
			echo "Vaya! $PGM no se pudo desmontar $1."
			echo -e "Cancelando!\n"
			exit 0
		fi
	else
		echo -e "Cancelando!\n"
		exit 0
	fi
	}

DST_ROOT_PARTITION=/dev/${DST_DISK}2
DST_BOOT_PARTITION=/dev/${DST_DISK}1

# Check that none of the destination partitions are busy (mounted).
#
DST_ROOT_CURMOUNT=`fgrep "$DST_ROOT_PARTITION " /etc/mtab | cut -f 2 -d ' ' `
DST_BOOT_CURMOUNT=`fgrep "$DST_BOOT_PARTITION " /etc/mtab | cut -f 2 -d ' ' `

if [ "$DST_ROOT_CURMOUNT" != "" ] || [ "$DST_BOOT_CURMOUNT" != "" ]
then
	echo "La particion destino esta ocupada (montada).  Estado del montaje :"
	echo "    $DST_ROOT_PARTITION:  $DST_ROOT_CURMOUNT"
	echo "    $DST_BOOT_PARTITION:  $DST_BOOT_CURMOUNT"
	if [ "$DST_BOOT_CURMOUNT" != "" ]
	then
		unmount_or_abort $DST_BOOT_CURMOUNT
	fi
	if [ "$DST_ROOT_CURMOUNT" != "" ]
	then
		unmount_or_abort $DST_ROOT_CURMOUNT
	fi
fi


TEST_MOUNTED=`fgrep " $CLONE " /etc/mtab | cut -f 1 -d ' ' `
if [ "$TEST_MOUNTED" != "" ]
then
	echo "Este script utiliza $CLONE para montar los archivos del sistema, pero"
	echo "$CLONE ya se encuentra montado con $TEST_MOUNTED."
	unmount_or_abort $CLONE 
fi

if [ ! -d $CLONE ]
then
	MNT_MOUNT=`fgrep " /mnt " /etc/mtab | cut -f 1 -d ' ' `
	if [ "$MNT_MOUNT" = "" ]
	then
		mkdir $CLONE
	else
		echo "$MNT_MOUNT esta actualmente montando en /mnt."
		unmount_or_abort /mnt
		mkdir $CLONE
	fi
fi


# Borrowed from do_expand_rootfs in raspi-config
expand_rootfs()
	{
	# Get the starting offset of the root partition
	# (with Jessie's parted, now need to strip trailing 's' from PART_START)
	PART_START=$(parted /dev/mmcblk0 -ms unit s p  \
			| grep "^2" | cut -f 2 -d: | cut -f 1 -d s)
	[ "$PART_START" ] || return 1
	# Return value will likely be error for fdisk as it fails to reload the
	# partition table because the root fs is mounted
	fdisk /dev/$DST_DISK > /dev/null <<EOF
p
d
2
n
p
2
$PART_START

p
w
q
EOF
	}


# =========== Disk Setup and Checks ===========
#
# Check that destination partitions are the right type.
#
DST_BOOT_PARTITION_TYPE=`parted /dev/$DST_DISK -ms p 2>/dev/null \
		| grep "^1" | cut -f 5 -d:`
DST_ROOT_PARTITION_TYPE=`parted /dev/$DST_DISK -ms p 2>/dev/null \
		| grep "^2" | cut -f 5 -d:`

CLONE_MODE="rsync modifica los archivos existentes a $DST_DISK archivos de sistema"

if [ "$DST_BOOT_PARTITION_TYPE" != "$SRC_BOOT_PARTITION_TYPE" ] || \
   [ "$DST_ROOT_PARTITION_TYPE" != "$SRC_ROOT_PARTITION_TYPE" ] || \
   [ "$FORCE_INITIALIZE" = "true" ]
then
	CLONE_MODE="rsync todos los archivos a $DST_DISK la raiz del sistema (root)"
	echo ""
	if [ "$FORCE_INITIALIZE" = "true" ]
	then
		echo "Forzando la inicializacion de una particion del disco destino $DST_DISK"
	else
		echo "El disco destino $DST_DISK no contiene la tabla"
		echo "que coincide con el disco de arranque /dev/mmcblk0 en la tabla de operaciones"
		echo "la inicializacion del disco es requerida."
	fi

	echo "El disco destino '$DST_DISK' contiene las particiones:"
	parted /dev/$DST_DISK -s unit MB p 2>/dev/null \
		| sed "/^Model/d ; /^Sector/d ; /^Disk Flags/d"

#	if [ "$DST_BOOT_PARTITION_TYPE" != "$SRC_BOOT_PARTITION_TYPE" ]
#	then
#		echo -e "  ... Cannot find a destination boot file system of type: $SRC_BOOT_PARTITION_TYPE\n"
#	fi
#	if [ "$DST_ROOT_PARTITION_TYPE" != "$SRC_ROOT_PARTITION_TYPE" ]
#	then
#		echo -e "  ... Cannot find a destination root file system of type: $SRC_ROOT_PARTITION_TYPE\n"
#	fi

	echo "*** Todo los datos del disco detino $DST_DISK seran sobrescritos! ***"
	echo ""
	echo -n "Quieres inicializar el disco destino /dev/$DST_DISK? (si/no): "

	read resp
	if [ "$resp" = "s" ] || [ "$resp" = "si" ]
	then
		# Image onto the destination disk a beginning fragment of the
		# running SD card file structure that spans at least more than
		# the start of partition 2.
		#
		# Calculate the start of partition 2 in MB for the dd.
		PART2_START=$(parted /dev/mmcblk0 -ms unit MB p | grep "^2" \
				| cut -f 2 -d: | sed s/MB// | tr "," "." | cut -f 1 -d.)
		# and add some slop
		DD_COUNT=`expr $PART2_START + 8`

		echo ""
		echo "Calculando la estructura de la particion, copiando $DD_COUNT megabytes..."
		sync
		dd if=/dev/mmcblk0 of=/dev/$DST_DISK bs=1M count=$DD_COUNT

		# Partition was copied live so fsck to clean up for possible future
		# "Volume was not properly unmounted" warnings.
		if [ "$HAVE_FSCK_VFAT" = "yes" ]
		then
			echo "Ejecutando fsck en $DST_BOOT_PARTITION..."
			fsck -p $DST_BOOT_PARTITION &> /dev/null
		fi

		# But, though Partion 1 is now imaged, partition 2 is incomplete and
		# maybe the wrong size for the destination SD card.  So fdisk it to
		# make it fill the rest of the disk and mkfs it to clean it out.
		#
		echo "Calculando el tamanio de la particion 2 (particion root) para utilizar"
		echo "todo el espacio disponible de la SDcard..."
		expand_rootfs
		mkfs.ext4 -F $DST_ROOT_PARTITION

		echo ""
		echo "/dev/$DST_DISK esta inicializandose y redimensionando. Las particiones estan en:"
#		fdisk -l /dev/$DST_DISK | grep $DST_DISK
		parted /dev/$DST_DISK unit MB p \
			| sed "/^Model/d ; /^Sector/d ; /^Disk Flags/d"

		SRC_ROOT_VOL_NAME=`e2label /dev/mmcblk0p2`
		echo ""
		echo "Etiqueta del booteo existente rootfs /dev/mmcblk0p2 : $SRC_ROOT_VOL_NAME"
		echo -n "Puede introducir una etiqueta para rootfs $DST_ROOT_PARTITION: "
		read resp
		if [ "$resp" != "" ]
		then
			e2label $DST_ROOT_PARTITION $resp
		fi
	else
		echo -e "Cancelando\n"
		exit 0
	fi
fi


# =========== Setup Summary ===========
#
DST_ROOT_VOL_NAME=`e2label $DST_ROOT_PARTITION`

if [ "$DST_ROOT_VOL_NAME" = "" ]
then
	DST_ROOT_VOL_NAME="no label"
fi

echo ""
echo "======== Clone Summary ========"
echo "Modo de clonado              	:  $CLONE_MODE"
echo "Disco destino del clonado	   	:  $DST_DISK"
echo "Destino del clonado de rootfs	:  $DST_ROOT_PARTITION ($DST_ROOT_VOL_NAME) on ${CLONE}"
echo "Destino del clonado bootfs	:  $DST_BOOT_PARTITION on ${CLONE}/boot"
echo "Modo detallado           		:  $VERBOSE"
echo "==============================="


# If this is an SD card initialization, can watch progress of the clone
# in another terminal with:  watch df -h
#
echo -n "Chequeo final, esta todo bien, continuar con el clonado (si/no)?: "
read resp
if [ "$resp" != "s" ] && [ "$resp" != "si" ]
then
	echo -e "Cancelando la clonacion.\n"
	exit 0
fi

#
# =========== End of Setup  ===========




# Mount destination filesystems.

echo "=> Montando $DST_ROOT_PARTITION ($DST_ROOT_VOL_NAME) en $CLONE"
if ! mount $DST_ROOT_PARTITION $CLONE
then
	echo -e "Montaje fallido de $DST_ROOT_PARTITION, cancelando!\n"
	exit 0
fi

if [ ! -d $CLONE/boot ]
then
	mkdir $CLONE/boot
fi

echo "=> Montando $DST_BOOT_PARTITION en $CLONE/boot"
if ! mount $DST_BOOT_PARTITION $CLONE/boot
then
	umount $CLONE
	echo -e "Montaje fallido de $DST_BOOT_PARTITION, cancelando!\n"
	exit 0
fi

echo "==============================="

# Do not include a dhpys swapfile in the clone.  dhpys-swapfile will
# regenerate it at boot.
#
if [ -f /etc/dphys-swapfile ]
then
	SWAPFILE=`cat /etc/dphys-swapfile | grep ^CONF_SWAPFILE | cut -f 2 -d=`
	if [ "$SWAPFILE" = "" ]
	then
		SWAPFILE=/var/swap
	fi
	EXCLUDE_SWAPFILE="--exclude $SWAPFILE"
fi

START_TIME=`date '+%H:%M:%S'`

# Exclude fuse mountpoint .gvfs, various other mount points, and tmpfs
# file systems from the rsync.
#
sync
echo "Iniciando el rsycn de archivos de sistema a $DST_DISK"
echo -n "(Esto puede tomar bastante tiempo)..."
rsync $RSYNC_OPTIONS --delete \
		$EXCLUDE_SWAPFILE \
		--exclude '.gvfs' \
		--exclude '/dev' \
		--exclude '/media' \
		--exclude '/mnt' \
		--exclude '/proc' \
		--exclude '/run' \
		--exclude '/sys' \
		--exclude '/tmp' \
		--exclude 'lost\+found' \
	// \
	$CLONE



# Fixup some stuff
#

for i in dev media mnt proc run sys
do
	if [ ! -d $CLONE/$i ]
	then
		mkdir $CLONE/$i
	fi
done

if [ ! -d $CLONE/tmp ]
then
	mkdir $CLONE/tmp
	chmod a+w $CLONE/tmp
fi

# Some extra optional dirs I create under /mnt
for i in $OPTIONAL_MNT_DIRS
do
	if [ ! -d $CLONE/mnt/$i ]
	then
		mkdir $CLONE/mnt/$i
	fi
done

rm -f $CLONE/etc/udev/rules.d/70-persistent-net.rules


DATE=`date '+%F %H:%M'`

echo "$DATE  $HOSTNAME $PGM : clonar a $DST_DISK ($DST_ROOT_VOL_NAME)" \
		>> $CLONE_LOG
echo "$DATE  $HOSTNAME $PGM : clonar a $DST_DISK ($DST_ROOT_VOL_NAME)" \
		>> $CLONE/$CLONE_LOG


STOP_TIME=`date '+%H:%M:%S'`

echo ""
echo "*** Terminado el clonado a /dev/$DST_DISK ***"
echo "    Comenzado: $START_TIME    Terminado: $STOP_TIME"
echo ""

# Pause before unmounting in case I want to inspect the clone results
# or need to custom modify any files on the destination SD clone.
# Eg. modify $CLONE/etc/hostname, $CLONE/etc/network/interfaces, etc
# if I'm cloning into a card to be installed on another Pi.
#
echo -n "Pulsa Enter cuando estes listo para desmontar las particiones... /dev/$DST_DISK "
read resp

echo "desmontando $CLONE/boot"
umount $CLONE/boot

echo "desmontando $CLONE"
umount $CLONE


echo "==============================="

exit 0
